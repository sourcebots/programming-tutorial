{
  "summary": "SourceBots Programming Tutorial for Smallpiece 2017",
  "title": "Sourcebots Programming Tutorial",
  "programming_language": "Python 3.x",
  "language": "en",
  "items": [
    {
      "id": 0,
      "title": "basics",
      "task_list": [
        {
          "name": "Test Task",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "text": "# TODO: type solution here\nprint(Code goes here)\n",
              "placeholders": [
                {
                  "offset": 33,
                  "length": 14,
                  "hints": [
                    "You need to surround things in quotes"
                  ],
                  "possible_answer": "\"Hello World\"",
                  "placeholder_text": "Code goes here"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\n\n\ndef test_answer_placeholders():\n    placeholders \u003d get_answer_placeholders()\n    placeholder \u003d placeholders[0]\n    if placeholder.lower() in [\"\\\"hello world\\\"\", \"\u0027hello world\u0027\"]:\n        passed()\n    else:\n        failed(\"You didn\u0027t print \\\"Hello World\\\"\")\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    test_answer_placeholders()\n\n\n"
          },
          "description_text": "\u003chtml\u003e\nHellos\n\u003cbr\u003e\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "task_type": "edu"
        }
      ],
      "type": "lesson"
    },
    {
      "id": 0,
      "title": "setup",
      "task_list": [
        {
          "name": "initialisation",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "text": "from robot import Robot\n\ninitialise the robot here\n",
              "placeholders": [
                {
                  "offset": 25,
                  "length": 25,
                  "hints": [],
                  "possible_answer": "robot \u003d Robot()",
                  "placeholder_text": "initialise the robot here"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders, import_task_file\n\nfrom robot import Robot\n\n\ndef check_robot():\n    task \u003d import_task_file()\n    if not hasattr(task, \u0027robot\u0027):\n        return failed(\"No variable called \u0027robot\u0027\")\n    if isinstance(task.robot, Robot):\n        return passed()\n    return failed(\"robot is not a Robot\")\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    check_robot()\n\n\n"
          },
          "description_text": "\u003chtml\u003e\n\u003cp\u003eTo start, you\u0027ll need a robot object!\u003c/p\u003e\n\u003cp\u003eCreate an instance of the \u003ccode\u003eRobot\u003c/code\u003e class and store it in the variable \u003ccode\u003erobot\u003c/code\u003e.\u003c/p\u003e\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "task_type": "edu"
        }
      ],
      "type": "lesson"
    },
    {
      "id": 0,
      "title": "motors",
      "task_list": [
        {
          
          "name": "read",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "text": "from robot import Robot\n\nrobot \u003d Robot()\n\nboard \u003d robot.motor_boards[motor board key]\n",
              "placeholders": [
                {
                  "offset": 69,
                  "length": 15,
                  "hints": [
                    "Motor boards can be indexed by either their serial number or order number"
                  ],
                  "possible_answer": "0",
                  "placeholder_text": "motor board key"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\n\n\ndef test_answer_placeholders():\n    placeholders \u003d get_answer_placeholders()\n    if placeholders[0] in [\"0\", \"\u0027SB123\u0027\", \"\\\"SB123\\\"\"]:\n        passed()\n    else:\n        failed(\"Incorrect index\")\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    test_answer_placeholders()\n\n\n"
          },
          "description_text": "\u003chtml\u003e\n\u003cp\u003eTo control the motors, first you need to get a motor board\u003c/p\u003e\n\u003cp\u003eSet the \u003ccode\u003eboard\u003c/code\u003e variable to the first motor board\u003c/p\u003e\n\n\u003cp\u003eAvailable Motor Boards:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eSB123\u003c/li\u003e\n  \u003cli\u003eSB456\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "task_type": "edu"
        },
        {
          
          "name": "set power",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "text": "from robot import Robot\n\nrobot \u003d Robot()\n\nboard \u003d robot.motor_boards[0]\n\nboard.type here\n",
              "placeholders": [
                {
                  "offset": 79,
                  "length": 9,
                  "hints": [],
                  "possible_answer": "m0.voltage \u003d 0.5",
                  "placeholder_text": "type here"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, import_task_file\n\n\ndef test_voltage():\n    task \u003d import_task_file()\n    if task.board.m0._voltage \u003d\u003d 0.5:\n        return passed()\n    return failed(\"Voltage was not set to half speed forwards\")\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    test_voltage()\n"
          },
          "description_text": "\u003chtml\u003e\n\u003cp\u003eTime to turn on a motor!\u003c/p\u003e\n\u003cp\u003eSet the voltage of motor 0 to half power, forwards\u003c/p\u003e\n\u003cbr\u003e\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "task_type": "edu"
        },
        {
          
          "name": "read_power",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "text": "from robot import Robot\n\nrobot \u003d Robot()\nboard \u003d robot.motor_boards[0]\nboard.m0.voltage \u003d 0.5\n\nboard.motor.voltage \u003d \n",
              "placeholders": [
                {
                  "offset": 101,
                  "length": 5,
                  "hints": [],
                  "possible_answer": "m1",
                  "placeholder_text": "motor"
                },
                {
                  "offset": 117,
                  "length": 0,
                  "hints": [],
                  "possible_answer": "board.m0.voltage",
                  "placeholder_text": ""
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders, import_task_file\n\n\ndef test_answer_placeholders():\n    placeholders \u003d get_answer_placeholders()\n    if placeholders[0] !\u003d \"m1\":\n        return failed(\"You set the wrong motor!\")\n    if placeholders[1] \u003d\u003d \"0.5\":\n        return failed(\"Dont set the value directly!\")\n    passed()\n\n\ndef test_voltage():\n    task \u003d import_task_file()\n    if task.board.m1._voltage !\u003d 0.5:\n        return failed(\"Got incorrect voltage value\")\n    passed()\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    test_answer_placeholders()\n    test_voltage()\n"
          },
          "description_text": "\u003chtml\u003e\n\u003cp\u003eSometimes you may want to read the power level too\u003c/p\u003e\n\u003cp\u003eSet the power of the second motor to the value of the first, without hardcoding the value\u003c/p\u003e\n\u003cbr\u003e\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "task_type": "edu"
        }
      ],
      "type": "lesson"
    },
    {
      "id": 0,
      "title": "servos",
      "task_list": [
        {
          
          "name": "read",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "text": "from robot import Robot\n\nrobot \u003d Robot()\n\nboard \u003d robot.servo_boards[servo board index]\n",
              "placeholders": [
                {
                  "offset": 69,
                  "length": 17,
                  "hints": [
                    "Servo boards can be indexed by either their serial number or order number"
                  ],
                  "possible_answer": "0",
                  "placeholder_text": "servo board index"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\n\n\ndef test_answer_placeholders():\n    placeholders \u003d get_answer_placeholders()\n    if placeholders[0] in [\"0\", \"\\\"SBABC\\\"\", \"\u0027SBABC\u0027\"]:\n        passed()\n    else:\n        failed(\"Incorrect board index\")\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    test_answer_placeholders()\n\n\n"
          },
          "description_text": "\u003chtml\u003e\n\u003cp\u003eTo control a servo, first you need to get a servo board\u003c/p\u003e\n\u003cp\u003eSet the \u003ccode\u003eboard\u003c/code\u003e variable to the servo board\u003c/p\u003e\n\n\u003cp\u003eAvailable Servo Boards:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eSBABC\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "task_type": "edu"
        },
        {
          
          "name": "set_position",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "text": "from robot import Robot\n\nrobot \u003d Robot()\n\nboard \u003d robot.servo_boards[0]\n\nboard.servosindex0]type heren \u003dvalue5\n",
              "placeholders": [
                {
                  "offset": 85,
                  "length": 5,
                  "hints": [],
                  "possible_answer": "0",
                  "placeholder_text": "index"
                },
                {
                  "offset": 92,
                  "length": 9,
                  "hints": [],
                  "possible_answer": "position",
                  "placeholder_text": "type here"
                },
                {
                  "offset": 104,
                  "length": 5,
                  "hints": [],
                  "possible_answer": "-0.25",
                  "placeholder_text": "value"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, import_task_file\n\n\ndef check_position():\n    task \u003d import_task_file()\n    if task.board.servos[0].position \u003d\u003d -0.25:\n        return passed()\n    return failed(\"Position incorrect\")\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    check_position()\n"
          },
          "description_text": "\u003chtml\u003e\n\u003cp\u003eTime to control a servo!\u003c/p\u003e\n\u003cp\u003eSet the power of the servo to a quarter, backwards\u003c/p\u003e\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "task_type": "edu"
        }
      ],
      "type": "lesson"
    },
    {
      "id": 0,
      "title": "power",
      "task_list": [
        {
          
          "name": "set_power",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "text": "from robot import Robot\n\nrobot \u003d Robot()\n\nboard \u003d robot.power_board\n\nboard.type here\n",
              "placeholders": [
                {
                  "offset": 75,
                  "length": 9,
                  "hints": [],
                  "possible_answer": "power_on()",
                  "placeholder_text": "type here"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\n\n\ndef test_answer_placeholders():\n    placeholders \u003d get_answer_placeholders()\n    if placeholders[0] \u003d\u003d \"power_on()\":\n        passed()\n    else:\n        failed(\"You didn\u0027t turn the power board outputs on!\")\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    test_answer_placeholders()\n\n\n"
          },
          "description_text": "\u003chtml\u003e\n\u003cp\u003eTime to control the power board\u003c/p\u003e\n\u003cp\u003eTurn the inputs of the power board on\u003c/p\u003e\n\u003cbr\u003e\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "task_type": "edu"
        }
      ],
      "type": "lesson"
    },
    {
      "id": 0,
      "title": "vision",
      "task_list": [
        {
          
          "name": "get_markers",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "text": "from robot import Robot\n\nrobot \u003d Robot()\n\nmarkers \u003d type here\n",
              "placeholders": [
                {
                  "offset": 52,
                  "length": 9,
                  "hints": [],
                  "possible_answer": "robot.camera.see()",
                  "placeholder_text": "type here"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders, import_task_file\n\n\ndef test_marker_list():\n    task \u003d import_task_file()\n    if type(task.markers) \u003d\u003d list:\n        return passed()\n    return failed(\"You didn\u0027t get any markers\")\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n\n\n\n"
          },
          "description_text": "\u003chtml\u003e\n\u003cp\u003eYour robot can see using the attached webcam.\u003c/p\u003e\n\u003cp\u003eLook for markers, and store them in \u003ccode\u003emarkers\u003c/code\u003e.\u003c/p\u003e\n\u003cbr\u003e\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "task_type": "edu"
        },
        {
          
          "name": "get_token",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "text": "from robot import Robot, TOKEN\n\nrobot \u003d Robot()\n\nmarkers \u003d robot.camera.see()\n\ntoken \u003d None\n\nfor marker in markers:\n    type here\n",
              "placeholders": [
                {
                  "offset": 120,
                  "length": 9,
                  "hints": [],
                  "possible_answer": "if marker.id in TOKEN:\n        token \u003d marker\n        break",
                  "placeholder_text": "type here"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, import_task_file\n\nfrom robot import TOKEN\nfrom robot.marker import Marker\n\ndef test_marker():\n    task \u003d import_task_file()\n    token \u003d task.token\n    if token is None:\n        return failed(\"You forgot to store the token!\")\n    if not isinstance(token, Marker):\n        return failed(\"You haven\u0027t stored a marker!\")\n    if token.id not in TOKEN:\n        return failed(\"This isnt a token marker!\")\n    return passed()\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    test_marker()\n\n\n"
          },
          "description_text": "\u003chtml\u003e\n\u003cp\u003eFrom all the tokens you can see, you may only want the ones attached to tokens\u003c/p\u003e\n\u003cp\u003eFrom the list of markers, get one that\u0027s a token, and store it in \u003ccode\u003etoken\u003c/code\u003e.\u003c/p\u003e\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "task_type": "edu"
        }
      ],
      "type": "lesson"
    },
    {
      "id": 0,
      "title": "game",
      "task_list": [
        {
          
          "name": "zone",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "text": "from robot import Robot\n\nrobot \u003d Robot()\n\nzone \u003d type here\n\n",
              "placeholders": [
                {
                  "offset": 49,
                  "length": 9,
                  "hints": [],
                  "possible_answer": "robot.zone",
                  "placeholder_text": "type here"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, import_task_file\n\ndef test_zone():\n    task \u003d import_task_file()\n    zone \u003d task.zone\n    if zone \u003d\u003d 1:\n        return passed()\n    return failed(\"Incorrect zone\")\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    test_zone()\n\n\n"
          },
          "description_text": "\u003chtml\u003e\n\u003cp\u003eWhen starting your match, it\u0027s useful to know what zone youre starting in\u003c/p\u003e\n\u003cp\u003eGet the zone of your robot and store it in the variable \u003ccode\u003ezone\u003c/code\u003e.\u003c/p\u003e\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "task_type": "edu"
        },
        {
          
          "name": "mode",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "text": "from robot import Robot\n\nrobot \u003d Robot()\n\nmode \u003d type here\n",
              "placeholders": [
                {
                  "offset": 49,
                  "length": 9,
                  "hints": [],
                  "possible_answer": "robot.mode",
                  "placeholder_text": "type here"
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, import_task_file\n\nfrom robot import GameMode\n\ndef test_mode():\n    task \u003d import_task_file()\n    mode \u003d task.mode\n    if mode \u003d\u003d GameMode.COMPETITION:\n        return passed()\n    return failed(\"Incorrect mode\")\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    test_mode()\n\n\n"
          },
          "description_text": "\u003chtml\u003e\n\u003cp\u003eIt might be useful to disable certain things when youre actually running in a competition mode, to possibly speed up your robot.\u003c/p\u003e\n\u003cp\u003eFind out what mode your robot is in, and store it in the variable \u003ccode\u003emode\u003c/code\u003e\u003c/p\u003e\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "task_type": "edu"
        }
      ],
      "type": "lesson"
    },
    {
      "id": 0,
      "title": "lesson8",
      "task_list": [
        {
          "name": "task1",
          "stepic_id": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "text": "# TODO: type solution here\n",
              "placeholders": []
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\n\n\ndef test_answer_placeholders():\n    placeholders \u003d get_answer_placeholders()\n    placeholder \u003d placeholders[0]\n    if placeholder \u003d\u003d \"\":       # TODO: your condition here\n        passed()\n    else:\n        failed()\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    # test_answer_placeholders()       # TODO: uncomment test call\n\n\n"
          },
          "description_text": "\u003chtml\u003e\nWrite your task text here.\n\u003cbr\u003e\n\u003c/html\u003e",
          "description_format": "html",
          "additional_files": {},
          "task_type": "edu"
        }
      ],
      "type": "lesson"
    },
    {
      "id": 0,
      "title": "Edu additional materials",
      "task_list": [
        {
          "name": "Edu additional materials",
          "stepic_id": 0,
          "task_files": {},
          "test_files": {},
          "description_format": "html",
          "additional_files": {
            "robot/__init__.py": "from robot.game_specific import *\nfrom robot.motor import MotorBoard\nfrom robot.servo import ServoBoard\nfrom robot.camera import Camera\nfrom robot.power import PowerBoard\n\nBRAKE \u003d 0\nCOAST \u003d \u0027coast\u0027\n\nmotor0 \u003d MotorBoard(\u0027SB123\u0027)\nmotor1 \u003d MotorBoard(\u0027SB456\u0027)\nservo0 \u003d ServoBoard(\u0027SBABC\u0027)\ncamera \u003d Camera(\u0027SB789\u0027)\npower \u003d PowerBoard(\u0027SBDEF\u0027)\n\n\nclass Robot():\n    motor_boards \u003d {\n        \u0027SB123\u0027: motor0,\n        \u0027SB456\u0027: motor1,\n        0: motor0,\n        1: motor1\n    }\n\n    servo_boards \u003d {\n        \u0027SBABC\u0027: servo0,\n        0: servo0\n    }\n\n    cameras \u003d {\n        \u0027SB789\u0027: camera,\n        0: camera\n    }\n\n    power_boards \u003d {\n        \u0027SBDEF\u0027: power,\n        0: power\n    }\n\n    def __init__(self):\n        self.motor_board \u003d self.motor_boards[0]\n        self.servo_board \u003d self.servo_boards[0]\n        self.power_board \u003d self.power_boards[0]\n        self.camera \u003d self.cameras[0]\n        self.zone \u003d 1\n        self.mode \u003d GameMode.COMPETITION\n",
            "motors/set power/task.html.bak": "\u003chtml\u003e\n\u003cp\u003eTime to turn on a motor!\u003c/p\u003e\n\u003cp\u003eSet the voltage of motor 0 to half power, forwards\u003c/p\u003e\n\u003cbr\u003e\n\u003c/html\u003e\n",
            "game/mode/tests.py.bak": "from test_helper import run_common_tests, failed, passed, import_task_file\n\nfrom robot import GameMode\n\ndef test_mode():\n    task \u003d import_task_file()\n    mode \u003d task.mode\n    if mode \u003d\u003d GameMode.COMPETITION:\n        return passed()\n    return failed(\"Incorrect mode\")\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    test_mode()\n\n\n",
            "lesson4/task1/task.py": "from robot import Robot\n\nrobot \u003d Robot()\n\nboard \u003d robot.servo_boards[0]\n",
            "circle.yml": "machine:\n  python:\n    version: 3.6.2\n  environment:\n    PYTHONPATH: ${PWD}:${PYTHONPATH}\n\ntest:\n  override:\n    - bash scripts/test.sh\n    - python3 scripts/init.py\n    - python3 scripts/ideal_api.py\n",
            "servos/set_position/task.py.bak": "from robot import Robot\n\nrobot \u003d Robot()\n\nboard \u003d robot.servo_boards[0]\n\nboard.ports[0].position \u003d -0.25\n",
            "lesson6/task2/task.py": "from robot import Robot, TOKEN\n\nrobot \u003d Robot()\n\nmarkers \u003d robot.camera.see()\n\ntoken \u003d None\n\nfor marker in markers:\n    if marker.id in TOKEN:\n        token \u003d marker\n        break\n",
            "scripts/test.sh": "#!/usr/bin/env bash\n\nset -e\n\nfor task in lesson*/**/task.py; do\n  echo \"\u003e Testing \" $task\n  python3 $task\ndone\n",
            "setup/initialisation/task.py.bak": "from robot import Robot\n\nrobot \u003d Robot()\n",
            "scripts/ideal_api.py.bak": "\"\"\"\n    Used to test stub implementation\n\"\"\"\n\nfrom robot import Robot, COAST, BRAKE\n\nr \u003d Robot()\n\nleft_motor \u003d r.motor_boards[\u0027SB123\u0027].m0\nr.motor_boards[\u0027SB123\u0027].m1.voltage \u003d COAST\nr.motor_boards[0].m1.voltage \u003d 1.0\nr.motor_boards[0].m1.voltage \u003d 0\nr.motor_boards[0].m1.voltage \u003d BRAKE\nassert r.motor_boards[0].m1.voltage \u003d\u003d BRAKE\nr.motor_boards[0].m1.voltage \u003d 1\nr.motor_boards[0].m1.voltage \u003d -1\n\nr.servo_boards[0].ports[2].position \u003d -1\n\n# Indexing tokens\ntokens \u003d r.cameras[0].see()\n",
            "power/set_power/task.html.bak": "\u003chtml\u003e\n\u003cp\u003eTime to control the power board\u003c/p\u003e\n\u003cp\u003eTurn the inputs of the power board on\u003c/p\u003e\n\u003cbr\u003e\n\u003c/html\u003e\n",
            "setup/initialisation/task.html.bak": "\u003chtml\u003e\n\u003cp\u003eTo start, you\u0027ll need a robot object!\u003c/p\u003e\n\u003cp\u003eCreate an instance of the \u003ccode\u003eRobot\u003c/code\u003e class and store it in the variable \u003ccode\u003erobot\u003c/code\u003e.\u003c/p\u003e\n\u003c/html\u003e\n",
            "motors/read_power/task.html.bak": "\u003chtml\u003e\n\u003cp\u003eSometimes you may want to read the power level too\u003c/p\u003e\n\u003cp\u003eSet the power of the second motor to the value of the first, without hardcoding the value\u003c/p\u003e\n\u003cbr\u003e\n\u003c/html\u003e\n",
            "lesson7/task2/task.py": "from robot import Robot\n\nrobot \u003d Robot()\n\nmode \u003d robot.mode\n",
            "lesson3/task3/task.py": "from robot import Robot\n\nrobot \u003d Robot()\nboard \u003d robot.motor_boards[0]\nboard.m0.voltage \u003d 0.5\n\nboard.m1.voltage \u003d board.m0.voltage\n",
            "robot/power.py.bak": "class PowerBoard:\n    def __init__(self, serial):\n        self.serial \u003d serial\n\n    def power_on(self):\n        print(\"Powering on outputs on board {}.\".format(self.serial))\n\n    def power_off(self):\n        print(\"Powering off outputs on board {}.\".format(self.serial))\n",
            "lesson3/task1/task.py": "from robot import Robot\n\nrobot \u003d Robot()\n\nboard \u003d robot.motor_boards[0]\n",
            "power/set_power/tests.py.bak": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\n\n\ndef test_answer_placeholders():\n    placeholders \u003d get_answer_placeholders()\n    if placeholders[0] \u003d\u003d \"power_on()\":\n        passed()\n    else:\n        failed(\"You didn\u0027t turn the power board outputs on!\")\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    test_answer_placeholders()\n\n\n",
            "motors/set power/task.py.bak": "from robot import Robot\n\nrobot \u003d Robot()\n\nboard \u003d robot.motor_boards[0]\n\nboard.m0.voltage \u003d 0.5\n",
            "motors/read/task.py.bak": "from robot import Robot\n\nrobot \u003d Robot()\n\nboard \u003d robot.motor_boards[0]\n",
            "process.sh": "#!/usr/bin/env bash\n\nset -e\n\nrm -rf zip_dir/\n\necho \"\u003e Unzipping Archive...\"\nunzip -qxK Sourcebots_Programming_Tutorial.zip -d zip_dir\n\ncd zip_dir/\n\necho \"\u003e Cleaning out zip...\"\nrm -rf env/\nrm -rf test/\nrm -rf .git/\nrm -rf Sourcebots_Programming_Tutorial.zip\nrm -rf **/__pycache__\nrm -rf scripts/\n\nrm -f process.sh\nrm -f circle.yml\n\necho \"\u003e Moving robot stub into tasks...\"\nfor task in lesson*/**; do\n    cp -r robot/ $task\ndone\n\necho \"\u003e Recompressing...\"\nzip -rlqX Sourcebots_Programming_Tutorial.zip *\n\ncd ../\n\necho \"\u003e Cleaning up...\"\nmv zip_dir/Sourcebots_Programming_Tutorial.zip .\n\nrm -rf zip_dir/\n\necho \"\u003e Done!\"\n",
            "power/set_power/task.py.bak": "from robot import Robot\n\nrobot \u003d Robot()\n\nboard \u003d robot.power_board\n\nboard.power_on()\n",
            "motors/read/tests.py.bak": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\n\n\ndef test_answer_placeholders():\n    placeholders \u003d get_answer_placeholders()\n    if placeholders[0] in [\"0\", \"\u0027SB123\u0027\", \"\\\"SB123\\\"\"]:\n        passed()\n    else:\n        failed(\"Incorrect index\")\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    test_answer_placeholders()\n\n\n",
            "game/mode/task.py.bak": "from robot import Robot\n\nrobot \u003d Robot()\n\nmode \u003d robot.mode\n",
            "motors/read_power/task.py.bak": "from robot import Robot\n\nrobot \u003d Robot()\nboard \u003d robot.motor_boards[0]\nboard.m0.voltage \u003d 0.5\n\nboard.m1.voltage \u003d board.m0.voltage\n",
            "scripts/init.py.bak": "from robot import Robot\n\nprint(\"Initialising Robot...\")\n\nr \u003d Robot()\n\nprint(\"Robot now initialised.\")\nprint(\"It can be accessed through the variable \u0027r\u0027.\")\n",
            "robot/motor.py": "class Motor():\n    \"\"\"\n        Stub Motor\n    \"\"\"\n\n    def __init__(self, board, motor_name):\n        self.board \u003d board\n        self.motor_name \u003d motor_name\n        self._voltage \u003d 0\n\n    @property\n    def voltage(self):\n        return self._voltage\n\n    @voltage.setter\n    def voltage(self, voltage):\n        if voltage !\u003d \u0027coast\u0027:\n            assert -1 \u003c\u003d voltage \u003c\u003d 1\n        print(\"Setting {} on board {} to {}.\".format(self.motor_name, self.board._serial, voltage))\n        self._voltage \u003d voltage\n\n\nclass MotorBoard():\n    \"\"\"\n        Stub Motor Board\n    \"\"\"\n\n    def __init__(self, serial):\n        self._serial \u003d serial\n        self.m0 \u003d Motor(self, \"m0\")\n        self.m1 \u003d Motor(self, \"m1\")\n",
            "vision/get_markers/task.py.bak": "from robot import Robot\n\nrobot \u003d Robot()\n\nmarkers \u003d robot.camera.see()\n",
            "robot/motor.py.bak": "class Motor():\n    \"\"\"\n        Stub Motor\n    \"\"\"\n\n    def __init__(self, board, motor_name):\n        self.board \u003d board\n        self.motor_name \u003d motor_name\n        self._voltage \u003d 0\n\n    @property\n    def voltage(self):\n        return self._voltage\n\n    @voltage.setter\n    def voltage(self, voltage):\n        if voltage !\u003d \u0027coast\u0027:\n            assert -1 \u003c\u003d voltage \u003c\u003d 1\n        print(\"Setting {} on board {} to {}.\".format(self.motor_name, self.board._serial, voltage))\n        self._voltage \u003d voltage\n\n\nclass MotorBoard():\n    \"\"\"\n        Stub Motor Board\n    \"\"\"\n\n    def __init__(self, serial):\n        self._serial \u003d serial\n        self.m0 \u003d Motor(self, \"m0\")\n        self.m1 \u003d Motor(self, \"m1\")\n",
            "motors/set power/tests.py.bak": "from test_helper import run_common_tests, failed, passed, import_task_file\n\n\ndef test_voltage():\n    task \u003d import_task_file()\n    if task.board.m0._voltage \u003d\u003d 0.5:\n        return passed()\n    return failed(\"Voltage was not set to half speed forwards\")\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    test_voltage()\n",
            "lesson7/task1/task.py": "from robot import Robot\n\nrobot \u003d Robot()\n\nzone \u003d robot.zone\n",
            "README.md": "# Sourcebots Programming Tutorial\n\n[![CircleCI](https://img.shields.io/circleci/project/github/sourcebots/programming-tutorial.svg?style\u003dflat-square)](https://circleci.com/gh/sourcebots/programming-tutorial/)\n\nProgramming tutorial for Sourcebots to introduce people to the kits API. As well as basic tasks to introduce people to the course structure.\n\n## Installation\n1. Clone the project\n2. Open it in Pycharm EDU\n3. ???\n4. Bees?\n5. Profit!\n\n## Exporting\n\n__Note__: This must be built on Windows, checked out with `autocrlf`, because line endings.\n\n1. Right click the project in _Tree View_\n2. _Course Creator_ -\u003e _Generate Course Archive_\n3. Save resulting `Sourcebots_Programming_Tutorial.zip` file\n4. Run `process.sh` script to process course file\n5. ???\n6. Bees?\n7. Profit!\n\n## Running Exported Tutorial\n1. _Create New Project_ in Pycharm EDU, type _Educational_\n2. Select the cog next to _Courses_, _Add local course_, find the exported `.zip` file.\n3. Click _Create_\n4. ???\n5. Bees?\n6. Profit!\n\n## Basic Python Tutorial\nWriting a whole new tutorial for Python isnt worth it, so [here\u0027s](https://github.com/sourcebots/programming-tutorial/blob/master/basic.md) some resources to learn basic Python.\n\n## Documentation\nThis tutorial should match the [documentation](https://sourcebots.github.io/docs/).\n",
            "vision/get_markers/task.html.bak": "\u003chtml\u003e\n\u003cp\u003eYour robot can see using the attached webcam.\u003c/p\u003e\n\u003cp\u003eLook for markers, and store them in \u003ccode\u003emarkers\u003c/code\u003e.\u003c/p\u003e\n\u003cbr\u003e\n\u003c/html\u003e\n",
            "vision/get_token/tests.py.bak": "from test_helper import run_common_tests, failed, passed, import_task_file\n\nfrom robot import TOKEN\nfrom robot.marker import Marker\n\ndef test_marker():\n    task \u003d import_task_file()\n    token \u003d task.token\n    if token is None:\n        return failed(\"You forgot to store the token!\")\n    if not isinstance(token, Marker):\n        return failed(\"You haven\u0027t stored a marker!\")\n    if token.id not in TOKEN:\n        return failed(\"This isnt a token marker!\")\n    return passed()\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    test_marker()\n\n\n",
            "scripts/init.py": "from robot import Robot\n\nprint(\"Initialising Robot...\")\n\nr \u003d Robot()\n\nprint(\"Robot now initialised.\")\nprint(\"It can be accessed through the variable \u0027r\u0027.\")\n",
            "game/zone/task.py.bak": "from robot import Robot\n\nrobot \u003d Robot()\n\nzone \u003d robot.zone\n",
            "setup/initialisation/tests.py.bak": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders, import_task_file\n\nfrom robot import Robot\n\n\ndef check_robot():\n    task \u003d import_task_file()\n    if not hasattr(task, \u0027robot\u0027):\n        return failed(\"No variable called \u0027robot\u0027\")\n    if isinstance(task.robot, Robot):\n        return passed()\n    return failed(\"robot is not a Robot\")\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    check_robot()\n\n\n",
            "lesson2/task1/task.py": "from robot import Robot\n\nrobot \u003d Robot()\n",
            "vision/get_token/task.py.bak": "from robot import Robot, TOKEN\n\nrobot \u003d Robot()\n\nmarkers \u003d robot.camera.see()\n\ntoken \u003d None\n\nfor marker in markers:\n    if marker.id in TOKEN:\n        token \u003d marker\n        break\n",
            "scripts/ideal_api.py": "\"\"\"\n    Used to test stub implementation\n\"\"\"\n\nfrom robot import Robot, COAST, BRAKE\n\nr \u003d Robot()\n\nleft_motor \u003d r.motor_boards[\u0027SB123\u0027].m0\nr.motor_boards[\u0027SB123\u0027].m1.voltage \u003d COAST\nr.motor_boards[0].m1.voltage \u003d 1.0\nr.motor_boards[0].m1.voltage \u003d 0\nr.motor_boards[0].m1.voltage \u003d BRAKE\nassert r.motor_boards[0].m1.voltage \u003d\u003d BRAKE\nr.motor_boards[0].m1.voltage \u003d 1\nr.motor_boards[0].m1.voltage \u003d -1\n\nr.servo_boards[0].servos[2].position \u003d -1\n\n# Indexing tokens\ntokens \u003d r.cameras[0].see()\n",
            "robot/game_specific.py": "from enum import Enum\n\nWALL \u003d [1, 2, 3]\nTOKEN \u003d [4, 5, 6]\n\nMARKER_SIZES \u003d {}\nMARKER_SIZES.update({m: (0.25, 0.25) for m in WALL})\nMARKER_SIZES.update({m: (0.1, 0.1) for m in TOKEN})\n\n\nclass GameMode(Enum):\n    COMPETITION \u003d \u0027competition\u0027\n    DEVELOPMENT \u003d \u0027development\u0027\n",
            "servos/set_position/tests.py.bak": "from test_helper import run_common_tests, failed, passed, import_task_file\n\n\ndef check_position():\n    task \u003d import_task_file()\n    if task.board.ports[0].position \u003d\u003d -0.25:\n        return passed()\n    return failed(\"Position incorrect\")\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    check_position()\n",
            "lesson4/task2/task.py": "from robot import Robot\n\nrobot \u003d Robot()\n\nboard \u003d robot.servo_boards[0]\n\nboard.servos[0].position \u003d -0.25\n",
            "robot/camera.py.bak": "from robot.marker import Marker\nfrom random import randint\n\n\ndef build_fake_marker():\n    marker_id \u003d randint(1, 6)\n    dist \u003d randint(300, 6000) / 1000\n    coords \u003d tuple([randint(-90, 90) for i in range(3)])\n    return Marker(marker_id, (coords, dist))\n\n\nclass Camera:\n    def __init__(self, serial):\n        self.serial \u003d serial\n\n    def see(self):\n        print(\"Looking for markers...\")\n        markers \u003d [build_fake_marker() for i in range(randint(0, 6))]\n        print(\"Found {} markers\".format(len(markers)))\n        return markers\n",
            "robot/camera.py": "from robot.marker import Marker\nfrom random import randint\n\n\ndef build_fake_marker():\n    marker_id \u003d randint(1, 6)\n    dist \u003d randint(300, 6000) / 1000\n    coords \u003d tuple([randint(-90, 90) for i in range(3)])\n    return Marker(marker_id, (coords, dist))\n\n\nclass Camera:\n    def __init__(self, serial):\n        self.serial \u003d serial\n\n    def see(self):\n        print(\"Looking for markers...\")\n        markers \u003d [build_fake_marker() for i in range(randint(0, 6))]\n        print(\"Found {} markers\".format(len(markers)))\n        return markers\n",
            "robot/marker.py.bak": "import math\nfrom robot.game_specific import WALL, TOKEN\n\nclass PolarCoord:\n    def __init__(self, rot, dist_m):\n        self.rot_x_rad \u003d rot[0]\n        self.rot_y_rad \u003d rot[1]\n        self.rot_z_rad \u003d rot[2]\n        self.distance_metres \u003d dist_m\n\n    @property\n    def rot_x_deg(self):\n        return math.degrees(self.rot_x_rad)\n\n    @property\n    def rot_y_deg(self):\n        return math.degrees(self.rot_y_rad)\n\n    @property\n    def rot_z_deg(self):\n        return math.degrees(self.rot_z_rad)\n\n\nclass Marker:\n    def __init__(self, id, polar):\n        self.id \u003d id\n        self.polar \u003d PolarCoord(polar[0], polar[1])\n\n    @property\n    def distance_metres(self):\n        return self.polar.distance_metres\n\n    def is_wall_marker(self):\n        return self.id in WALL\n\n    def is_token_marker(self):\n        return self.id in TOKEN\n",
            "servos/set_position/task.html.bak": "\u003chtml\u003e\n\u003cp\u003eTime to control a servo!\u003c/p\u003e\n\u003cp\u003eSet the power of the servo to a quarter, backwards\u003c/p\u003e\n\u003c/html\u003e\n",
            "game/mode/task.html.bak": "\u003chtml\u003e\n\u003cp\u003eIt might be useful to disable certain things when youre actually running in a competition mode, to possibly speed up your robot.\u003c/p\u003e\n\u003cp\u003eFind out what mode your robot is in, and store it in the variable \u003ccode\u003emode\u003c/code\u003e\u003c/p\u003e\n\u003c/html\u003e\n",
            "servos/read/task.html.bak": "\u003chtml\u003e\n\u003cp\u003eTo control a servo, first you need to get a servo board\u003c/p\u003e\n\u003cp\u003eSet the \u003ccode\u003eboard\u003c/code\u003e variable to the servo board\u003c/p\u003e\n\n\u003cp\u003eAvailable Servo Boards:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eSBABC\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/html\u003e\n",
            "lesson6/task1/task.py": "from robot import Robot\n\nrobot \u003d Robot()\n\nmarkers \u003d robot.camera.see()\n",
            "robot/servo.py": "class Servo():\n    \"\"\"\n        Stub Servo\n    \"\"\"\n\n    def __init__(self, board, index):\n        self.board \u003d board\n        self.index \u003d index\n        self._position \u003d 0\n\n    @property\n    def position(self):\n        return self._position\n\n    @position.setter\n    def position(self, position):\n        assert -1 \u003c\u003d position \u003c\u003d 1\n        print(\"Setting servo {} on {} to {} degrees.\".format(self.index, self.board._serial, position))\n        self._position \u003d position\n\n\nclass ServoBoard():\n    \"\"\"\n        Stub Servo Board\n    \"\"\"\n\n    def __init__(self, serial):\n        self._serial \u003d serial\n        self.servos \u003d {}\n        for i in range(15):\n            self.servos[i] \u003d Servo(self, i)\n",
            "motors/read/task.html.bak": "\u003chtml\u003e\n\u003cp\u003eTo control the motors, first you need to get a motor board\u003c/p\u003e\n\u003cp\u003eSet the \u003ccode\u003eboard\u003c/code\u003e variable to the first motor board\u003c/p\u003e\n\n\u003cp\u003eAvailable Motor Boards:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eSB123\u003c/li\u003e\n  \u003cli\u003eSB456\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/html\u003e\n",
            "vision/get_markers/tests.py.bak": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders, import_task_file\n\n\ndef test_marker_list():\n    task \u003d import_task_file()\n    if type(task.markers) \u003d\u003d list:\n        return passed()\n    return failed(\"You didn\u0027t get any markers\")\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n\n\n\n",
            "lesson1/task1/task.py": "print(\"Hello World\")\n",
            "robot/power.py": "class PowerBoard:\n    def __init__(self, serial):\n        self.serial \u003d serial\n\n    def power_on(self):\n        print(\"Powering on outputs on board {}.\".format(self.serial))\n\n    def power_off(self):\n        print(\"Powering off outputs on board {}.\".format(self.serial))\n",
            "robot/marker.py": "import math\nfrom robot.game_specific import WALL, TOKEN\n\nclass PolarCoord:\n    def __init__(self, rot, dist_m):\n        self.rot_x_rad \u003d rot[0]\n        self.rot_y_rad \u003d rot[1]\n        self.rot_z_rad \u003d rot[2]\n        self.distance_metres \u003d dist_m\n\n    @property\n    def rot_x_deg(self):\n        return math.degrees(self.rot_x_rad)\n\n    @property\n    def rot_y_deg(self):\n        return math.degrees(self.rot_y_rad)\n\n    @property\n    def rot_z_deg(self):\n        return math.degrees(self.rot_z_rad)\n\n\nclass Marker:\n    def __init__(self, id, polar):\n        self.id \u003d id\n        self.polar \u003d PolarCoord(polar[0], polar[1])\n\n    @property\n    def distance_metres(self):\n        return self.polar.distance_metres\n\n    def is_wall_marker(self):\n        return self.id in WALL\n\n    def is_token_marker(self):\n        return self.id in TOKEN\n",
            "lesson3/task2/task.py": "from robot import Robot\n\nrobot \u003d Robot()\n\nboard \u003d robot.motor_boards[0]\n\nboard.m0.voltage \u003d 0.5\n",
            "test_helper.py": "import sys\n\n\ndef get_file_text(path):\n    \"\"\" Returns file text by path\"\"\"\n    file_io \u003d open(path, \"r\")\n    text \u003d file_io.read()\n    file_io.close()\n    return text\n\n\ndef get_file_output(encoding\u003d\"utf-8\", path\u003dsys.argv[-1], arg_string\u003d\"\"):\n    \"\"\"\n    Returns answer file output\n    :param encoding: to decode output in python3\n    :param path: path of file to execute\n    :return: list of strings\n    \"\"\"\n    import subprocess\n\n    proc \u003d subprocess.Popen([sys.executable, path], stdin\u003dsubprocess.PIPE, stdout\u003dsubprocess.PIPE,\n                            stderr\u003dsubprocess.STDOUT)\n    if arg_string:\n        for arg in arg_string.split(\"\\n\"):\n            proc.stdin.write(bytearray(str(arg) + \"\\n\", encoding))\n            proc.stdin.flush()\n\n    return list(map(lambda x: str(x.decode(encoding)), proc.communicate()[0].splitlines()))\n\n\ndef test_file_importable():\n    \"\"\" Tests there is no obvious syntax errors\"\"\"\n    path \u003d sys.argv[-1]\n    if not path.endswith(\".py\"):\n        import os\n\n        parent \u003d os.path.abspath(os.path.join(path, os.pardir))\n        python_files \u003d [f for f in os.listdir(parent) if os.path.isfile(os.path.join(parent, f)) and f.endswith(\".py\")]\n        for python_file in python_files:\n            if python_file \u003d\u003d \"tests.py\":\n                continue\n            check_importable_path(os.path.join(parent, python_file))\n        return\n    check_importable_path(path)\n\n\ndef check_importable_path(path):\n    \"\"\" Checks that file is importable.\n        Reports failure otherwise.\n    \"\"\"\n    saved_input \u003d patch_input()\n    try:\n        import_file(path)\n    except:\n        failed(\"The file contains syntax errors\", test_file_importable.__name__)\n        return\n    finally:\n        revert_input(saved_input)\n\n    passed(test_file_importable.__name__)\n\n\ndef patch_input():\n    def mock_fun(_m\u003d\"\"):\n        return \"mock\"\n\n    if sys.version_info[0] \u003d\u003d 3:\n        import builtins\n        save_input \u003d builtins.input\n        builtins.input \u003d mock_fun\n        return save_input\n    elif sys.version_info[0] \u003d\u003d 2:\n        import __builtin__\n        save_input \u003d __builtin__.raw_input\n        __builtin__.raw_input \u003d mock_fun\n        __builtin__.input \u003d mock_fun\n        return save_input\n\n\ndef revert_input(saved_input):\n    if sys.version_info[0] \u003d\u003d 3:\n        import builtins\n        builtins.input \u003d saved_input\n    elif sys.version_info[0] \u003d\u003d 2:\n        import __builtin__\n        __builtin__.raw_input \u003d saved_input\n        __builtin__.input \u003d saved_input\n\n\ndef import_file(path):\n    \"\"\" Returns imported file \"\"\"\n    if sys.version_info[0] \u003d\u003d 2 or sys.version_info[1] \u003c 3:\n        import imp\n\n        return imp.load_source(\"tmp\", path)\n    elif sys.version_info[0] \u003d\u003d 3:\n        import importlib.machinery\n\n        return importlib.machinery.SourceFileLoader(\"tmp\", path).load_module(\"tmp\")\n\n\ndef import_task_file():\n    \"\"\" Returns imported file.\n        Imports file from which check action was run\n    \"\"\"\n    path \u003d sys.argv[-1]\n    return import_file(path)\n\n\ndef test_is_not_empty():\n    \"\"\"\n        Checks that file is not empty\n    \"\"\"\n    path \u003d sys.argv[-1]\n    file_text \u003d get_file_text(path)\n\n    if len(file_text) \u003e 0:\n        passed()\n    else:\n        failed(\"The file is empty. Please, reload the task and try again.\")\n\n\ndef test_text_equals(text, error_text):\n    \"\"\"\n        Checks that answer equals text.\n    \"\"\"\n    path \u003d sys.argv[-1]\n    file_text \u003d get_file_text(path)\n\n    if file_text.strip() \u003d\u003d text:\n        passed()\n    else:\n        failed(error_text)\n\n\ndef test_answer_placeholders_text_deleted(error_text\u003d\"Don\u0027t just delete task text\"):\n    \"\"\"\n        Checks that all answer placeholders are not empty\n    \"\"\"\n    windows \u003d get_answer_placeholders()\n\n    for window in windows:\n        if len(window) \u003d\u003d 0:\n            failed(error_text)\n            return\n    passed()\n\n\ndef set_congratulation_message(message):\n    \"\"\" Overrides default \u0027Congratulations!\u0027 message \"\"\"\n    print(\"#educational_plugin CONGRATS_MESSAGE \" + message)\n\n\ndef failed(message\u003d\"Please, reload the task and try again.\", name\u003dNone):\n    \"\"\" Reports failure \"\"\"\n    if not name:\n        name \u003d sys._getframe().f_back.f_code.co_name\n    print(\"#educational_plugin \" + name + \" FAILED + \" + message)\n\n\ndef passed(name\u003dNone):\n    \"\"\" Reports success \"\"\"\n    if not name:\n        name \u003d sys._getframe().f_back.f_code.co_name\n    print(\"#educational_plugin \" + name + \" test OK\")\n\n\ndef get_answer_placeholders():\n    \"\"\"\n        Returns all answer placeholders text\n    \"\"\"\n    prefix \u003d \"#educational_plugin_window \u003d \"\n    path \u003d sys.argv[-1]\n    import os\n\n    file_name_without_extension \u003d os.path.splitext(path)[0]\n    windows_path \u003d file_name_without_extension + \"_windows\"\n    windows \u003d []\n    f \u003d open(windows_path, \"r\")\n    window_text \u003d \"\"\n    first \u003d True\n    for line in f.readlines():\n        if line.startswith(prefix):\n            if not first:\n                windows.append(window_text.strip())\n            else:\n                first \u003d False\n            window_text \u003d line[len(prefix):]\n        else:\n            window_text +\u003d line\n\n    if window_text:\n        windows.append(window_text.strip())\n\n    f.close()\n    return windows\n\n\ndef check_samples(samples\u003d()):\n    \"\"\"\n      Check script output for all samples. Sample is a two element list, where the first is input and\n      the second is output.\n    \"\"\"\n    for sample in samples:\n        if len(sample) \u003d\u003d 2:\n            output \u003d get_file_output(arg_string\u003dstr(sample[0]))\n            if \"\\n\".join(output) !\u003d sample[1]:\n                failed(\n                    \"Test from samples failed: \\n \\n\"\n                    \"Input:\\n{}\"\n                    \"\\n \\n\"\n                    \"Expected:\\n{}\"\n                    \"\\n \\n\"\n                    \"Your result:\\n{}\".format(str.strip(sample[0]), str.strip(sample[1]), \"\\n\".join(output)))\n                return\n        set_congratulation_message(\"All test from samples passed. Now we are checking your solution on Stepik server.\")\n\n    passed()\n\n\ndef run_common_tests(error_text\u003d\"Please, reload file and try again\"):\n    test_is_not_empty()\n    test_answer_placeholders_text_deleted()\n    test_file_importable()\n",
            "motors/read_power/tests.py.bak": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders, import_task_file\n\n\ndef test_answer_placeholders():\n    placeholders \u003d get_answer_placeholders()\n    if placeholders[0] !\u003d \"m1\":\n        return failed(\"You set the wrong motor!\")\n    if placeholders[1] \u003d\u003d \"0.5\":\n        return failed(\"Dont set the value directly!\")\n    passed()\n\n\ndef test_voltage():\n    task \u003d import_task_file()\n    if task.board.m1._voltage !\u003d 0.5:\n        return failed(\"Got incorrect voltage value\")\n    passed()\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    test_answer_placeholders()\n    test_voltage()\n",
            "lesson5/task1/task.py": "from robot import Robot\n\nrobot \u003d Robot()\n\nboard \u003d robot.power_board\n\nboard.power_on()\n",
            "game/zone/task.html.bak": "\u003chtml\u003e\n\u003cp\u003eWhen starting your match, it\u0027s useful to know what zone youre starting in\u003c/p\u003e\n\u003cp\u003eGet the zone of your robot and store it in the variable \u003ccode\u003ezone\u003c/code\u003e.\u003c/p\u003e\n\u003c/html\u003e\n",
            "game/zone/tests.py.bak": "from test_helper import run_common_tests, failed, passed, import_task_file\n\ndef test_zone():\n    task \u003d import_task_file()\n    zone \u003d task.zone\n    if zone \u003d\u003d 1:\n        return passed()\n    return failed(\"Incorrect zone\")\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    test_zone()\n\n\n",
            "servos/read/tests.py.bak": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\n\n\ndef test_answer_placeholders():\n    placeholders \u003d get_answer_placeholders()\n    if placeholders[0] in [\"0\", \"\\\"SBABC\\\"\", \"\u0027SBABC\u0027\"]:\n        passed()\n    else:\n        failed(\"Incorrect board index\")\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    test_answer_placeholders()\n\n\n",
            "robot/servo.py.bak": "class Servo():\n    \"\"\"\n        Stub Servo\n    \"\"\"\n\n    def __init__(self, board, index):\n        self.board \u003d board\n        self.index \u003d index\n        self._position \u003d 0\n\n    @property\n    def position(self):\n        return self._position\n\n    @position.setter\n    def position(self, position):\n        assert -1 \u003c\u003d position \u003c\u003d 1\n        print(\"Setting servo {} on {} to {} degrees.\".format(self.index, self.board._serial, position))\n        self._position \u003d position\n\n\nclass ServoBoard():\n    \"\"\"\n        Stub Servo Board\n    \"\"\"\n\n    def __init__(self, serial):\n        self._serial \u003d serial\n        self.ports \u003d {}\n        for i in range(15):\n            self.ports[i] \u003d Servo(self, i)\n",
            "servos/read/task.py.bak": "from robot import Robot\n\nrobot \u003d Robot()\n\nboard \u003d robot.servo_boards[0]\n",
            "vision/get_token/task.html.bak": "\u003chtml\u003e\n\u003cp\u003eFrom all the tokens you can see, you may only want the ones attached to tokens\u003c/p\u003e\n\u003cp\u003eFrom the list of markers, get one that\u0027s a token, and store it in \u003ccode\u003etoken\u003c/code\u003e.\u003c/p\u003e\n\u003c/html\u003e\n",
            "basic.md": "# Basic Tutorial\n\n\n## [Glossary](https://www.codecademy.com/articles/glossary-python)\nBasic glossary of terms, types, structures and syntax\n\n## [Python Syntax](https://www.codecademy.com/courses/introduction-to-python-6WeG3/resume?curriculum_id\u003d4f89dab3d788890003000096)\nInteractive Tutorial for basic syntax\n\n## [Functions](https://www.codecademy.com/courses/python-beginner-c7VZg/resume?curriculum_id\u003d4f89dab3d788890003000096)\nIntroduction to functions, boh definition of and using builtins\n\n## [Loops](https://www.codecademy.com/courses/python-beginner-en-cxMGf/resume?curriculum_id\u003d4f89dab3d788890003000096)\n`for`, `while`, `else`, all that good stuff!\n\n## [Advanced Topics](https://www.codecademy.com/courses/python-beginner-en-KAgt5/resume?curriculum_id\u003d4f89dab3d788890003000096)\nFor people that move very quickly. Contains `lambda`, `in`, itteration\n",
            "robot/__init__.py.bak": "from robot.game_specific import *\nfrom robot.motor import MotorBoard\nfrom robot.servo import ServoBoard\nfrom robot.camera import Camera\nfrom robot.power import PowerBoard\n\nBRAKE \u003d 0\nCOAST \u003d \u0027coast\u0027\n\nmotor0 \u003d MotorBoard(\u0027SB123\u0027)\nmotor1 \u003d MotorBoard(\u0027SB456\u0027)\nservo0 \u003d ServoBoard(\u0027SBABC\u0027)\ncamera \u003d Camera(\u0027SB789\u0027)\npower \u003d PowerBoard(\u0027SBDEF\u0027)\n\n\nclass Robot():\n    motor_boards \u003d {\n        \u0027SB123\u0027: motor0,\n        \u0027SB456\u0027: motor1,\n        0: motor0,\n        1: motor1\n    }\n\n    servo_boards \u003d {\n        \u0027SBABC\u0027: servo0,\n        0: servo0\n    }\n\n    cameras \u003d {\n        \u0027SB789\u0027: camera,\n        0: camera\n    }\n\n    power_boards \u003d {\n        \u0027SBDEF\u0027: power,\n        0: power\n    }\n\n    def __init__(self):\n        self.motor_board \u003d self.motor_boards[0]\n        self.servo_board \u003d self.servo_boards[0]\n        self.power_board \u003d self.power_boards[0]\n        self.camera \u003d self.cameras[0]\n        self.zone \u003d 1\n        self.mode \u003d GameMode.COMPETITION\n",
            "scripts/test.sh.bak": "#!/usr/bin/env bash\n\nset -e\n\nfor task in lesson*/**/task.py; do\n  echo \"\u003e Testing \" $task\n  python3 $task\ndone\n",
            "robot/game_specific.py.bak": "from enum import Enum\n\nWALL \u003d [1, 2, 3]\nTOKEN \u003d [4, 5, 6]\n\nMARKER_SIZES \u003d {}\nMARKER_SIZES.update({m: (0.25, 0.25) for m in WALL})\nMARKER_SIZES.update({m: (0.1, 0.1) for m in TOKEN})\n\n\nclass GameMode(Enum):\n    COMPETITION \u003d \u0027competition\u0027\n    DEVELOPMENT \u003d \u0027development\u0027\n"
          },
          "task_type": "edu"
        }
      ],
      "type": "lesson"
    }
  ]
}
